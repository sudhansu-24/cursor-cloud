const {
    GoogleGenerativeAI,
    HarmBlockThreshold,
    HarmCategory,

} = require("@google/generative-ai");

const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model:"gemini-2.0-flash-exp",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "text/plain",
};
const CodeGenerationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "application/json",
};


export const chatSession = model.startChat({
    generationConfig,
  history:[
  ],
});

export const GenAiCode=model.startChat({
  generationConfig:CodeGenerationConfig,
  history: [
    {
      role: "user",
      parts: [
        {text: "Generate a Todo App : Generate a React project using Vite. This project should include multiple components organized within a components folder. Use Tailwind CSS for styling.\n\nReturn the response in JSON format with the following structure:\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \" \"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\n\nHere is the reformatted and improved version for your prompt:\n\nGenerate a programming code structure in React project using Vite. \n\nReturn the response in JSON format with the following structure:\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"import React from 'react';\\nimport './styles.css';\\nexport default function App() {\\n  return (\\n    <div className='App'>\\n      <h1>Hello, World!</h1>\\n    </div>\\n  );\\n}\"\n}\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\n\nEnsure the files field contains all created files, and the generatedFiles field contains the files that were generated by the AI model.\n\nAdditionally, include an explanation of the code structure and the project title in the response.\n\nFor placeholder images, please use https://archive.org/download/placeholder-images-master/placeholder-images-master/placeholder.png.\n\nAdd emoji icons whenever needed to give a good user experience.\n\nThe lucide-react library is available for use.\nno src and and files in js not jsx\n"},
      ],
    },
    {
      role: "model",
      parts: [
        {text: "```json\n{\n  \"projectTitle\": \"React Todo App with Vite and Tailwind CSS ðŸš€\",\n  \"explanation\": \"This project is a basic Todo application built using React, Vite, and styled with Tailwind CSS. The components are organized within a 'components' folder for better structure. The application allows users to add, list, and delete todos.\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"import React from 'react';\\nimport './index.css';\\nimport TodoList from './components/TodoList';\\nimport TodoInput from './components/TodoInput';\\n\\n\\nfunction App() {\\n  return (\\n    <div className='flex flex-col items-center justify-center min-h-screen bg-gray-100'>\\n      <div className='bg-white shadow-md rounded-lg p-8 w-full max-w-md m-4'>\\n        <h1 className='text-2xl font-bold mb-6 text-center'>My Todo List âœ…</h1>\\n        <TodoInput />\\n        <TodoList />\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default App;\"\n    },\n    \"/components/TodoList.js\": {\n      \"code\": \"import React, { useState, useEffect } from 'react';\\nimport { Trash2 } from 'lucide-react';\\n\\nfunction TodoList() {\\n  const [todos, setTodos] = useState(() => {\\n    const savedTodos = localStorage.getItem('todos');\\n    return savedTodos ? JSON.parse(savedTodos) : [];\\n  });\\n\\n  useEffect(() => {\\n    localStorage.setItem('todos', JSON.stringify(todos));\\n  }, [todos]);\\n\\n  const handleDelete = (index) => {\\n    const newTodos = todos.filter((_, i) => i !== index);\\n    setTodos(newTodos);\\n  };\\n\\n  return (\\n    <ul className='mt-4'>\\n      {todos.map((todo, index) => (\\n        <li key={index} className='flex justify-between items-center py-2 border-b border-gray-200'>\\n          <span className='flex-1 mr-4'>{todo}</span>\\n          <button onClick={() => handleDelete(index)} className='text-red-500 hover:text-red-700 focus:outline-none'>\\n          <Trash2 size={20}/>\\n          </button>\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n}\\n\\nexport default TodoList;\"\n    },\n     \"/components/TodoInput.js\": {\n      \"code\": \"import React, { useState } from 'react';\\nimport { PlusCircle } from 'lucide-react';\\n\\nfunction TodoInput() {\\n  const [newTodo, setNewTodo] = useState('');\\n  const [todos, setTodos] = useState(() => {\\n    const savedTodos = localStorage.getItem('todos');\\n    return savedTodos ? JSON.parse(savedTodos) : [];\\n  });\\n\\n  const handleInputChange = (event) => {\\n    setNewTodo(event.target.value);\\n  };\\n\\n  const addTodo = () => {\\n    if (newTodo.trim() !== '') {\\n      setTodos([...todos, newTodo]);\\n      setNewTodo('');\\n    }\\n  };\\n\\n\\n  return (\\n    <div className='flex items-center mt-4'>\\n        <input\\n            type='text'\\n            placeholder='Add a new todo...' \\n            value={newTodo}\\n            onChange={handleInputChange}\\n            className='flex-1 border border-gray-300 rounded px-4 py-2 mr-2 focus:outline-none focus:border-blue-500'\\n        />\\n        <button onClick={addTodo} className='bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none'>\\n          <PlusCircle size={20}/>\\n        </button>\\n    </div>\\n  );\\n}\\n\\nexport default TodoInput;\"\n    },\n    \"/index.css\": {\n      \"code\": \"@tailwind base;\\n@tailwind components;\\n@tailwind utilities;\"\n    },\n    \"/vite.config.js\": {\n       \"code\": \"import { defineConfig } from 'vite';\\nimport react from '@vitejs/plugin-react';\\n\\n// https://vitejs.dev/config/\\nexport default defineConfig({\\n  plugins: [react()],\\n  server: {\\n    port: 3000,\\n  },\\n});\"\n     },\n    \"/package.json\": {\n        \"code\": \"{\\n  \\\"name\\\": \\\"todo-app\\\",\\n  \\\"private\\\": true,\\n  \\\"version\\\": \\\"0.0.0\\\",\\n  \\\"type\\\": \\\"module\\\",\\n  \\\"scripts\\\": {\\n    \\\"dev\\\": \\\"vite\\\",\\n    \\\"build\\\": \\\"vite build\\\",\\n    \\\"lint\\\": \\\"eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0\\\",\\n    \\\"preview\\\": \\\"vite preview\\\"\\n  },\\n  \\\"dependencies\\\": {\\n    \\\"lucide-react\\\": \\\"^0.344.0\\\",\\n    \\\"react\\\": \\\"^18.2.0\\\",\\n    \\\"react-dom\\\": \\\"^18.2.0\\\"\\n  },\\n  \\\"devDependencies\\\": {\\n    \\\"@types/react\\\": \\\"^18.2.55\\\",\\n    \\\"@types/react-dom\\\": \\\"^18.2.19\\\",\\n    \\\"@vitejs/plugin-react\\\": \\\"^4.2.1\\\",\\n    \\\"autoprefixer\\\": \\\"^10.4.17\\\",\\n    \\\"eslint\\\": \\\"^8.56.0\\\",\\n    \\\"eslint-plugin-react\\\": \\\"^7.33.2\\\",\\n    \\\"eslint-plugin-react-hooks\\\": \\\"^4.6.0\\\",\\n    \\\"eslint-plugin-react-refresh\\\": \\\"^0.4.5\\\",\\n    \\\"postcss\\\": \\\"^8.4.35\\\",\\n    \\\"tailwindcss\\\": \\\"^3.4.1\\\",\\n    \\\"vite\\\": \\\"^5.1.0\\\"\\n  }\\n}\\n\"\n     },\n     \"/tailwind.config.js\":{\n        \"code\": \"/** @type {import('tailwindcss').Config} */\\nexport default {\\n  content: [\\n    './index.html',\\n    './src/**/*.{js,ts,jsx,tsx}',\\n  ],\\n  theme: {\\n    extend: {},\\n  },\\n  plugins: [],\\n}\"\n     }\n  },\n  \"generatedFiles\": [\n    \"/App.js\",\n    \"/components/TodoList.js\",\n    \"/components/TodoInput.js\",\n    \"/index.css\",\n    \"/vite.config.js\",\n    \"/package.json\",\n    \"/tailwind.config.js\"\n  ]\n}\n```\n"},
      ],
    },
  ],
});

// response = chat_session.send_message("INSERT_INPUT_HERE")

// print(response.text)